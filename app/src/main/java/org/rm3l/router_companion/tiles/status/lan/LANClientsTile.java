/*
 * DD-WRT Companion is a mobile app that lets you connect to,
 * monitor and manage your DD-WRT routers on the go.
 *
 * Copyright (C) 2014-2022  Armel Soro
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact Info: Armel Soro <armel+router_companion@rm3l.org>
 */

package org.rm3l.router_companion.tiles.status.lan;

import android.os.Bundle;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.loader.content.Loader;
import org.rm3l.router_companion.resources.conn.NVRAMInfo;
import org.rm3l.router_companion.resources.conn.Router;
import org.rm3l.router_companion.tiles.DDWRTTile;

/** */
public class LANClientsTile extends DDWRTTile<NVRAMInfo> {

  private static final String LOG_TAG = LANClientsTile.class.getSimpleName();

  public LANClientsTile(
      @NonNull Fragment parentFragment, @NonNull Bundle arguments, @Nullable Router router) {
    // TODO
    super(parentFragment, arguments, router, null, null);
  }

  @Override
  public Integer getTileHeaderViewId() {
    // TODO
    return -1;
  }

  @Override
  public Integer getTileTitleViewId() {
    // TODO
    return -1;
  }

  /**
   * Called when a previously created loader has finished its load. Note that normally an
   * application is <em>not</em> allowed to commit fragment transactions while in this call, since
   * it can happen after an activity's state is saved. See {@link
   * androidx.fragment.app.FragmentManager#beginTransaction() FragmentManager.openTransaction()} for
   * further discussion on this.
   *
   * <p>
   *
   * <p>This function is guaranteed to be called prior to the release of the last data that was
   * supplied for this Loader. At this point you should remove all use of the old data (since it
   * will be released soon), but should not do your own release of the data since its Loader owns it
   * and will take care of that. The Loader will take care of management of its data so you don't
   * have to. In particular:
   *
   * <p>
   *
   * <ul>
   *   <li>
   *       <p>The Loader will monitor for changes to the data, and report them to you through new
   *       calls here. You should not monitor the data yourself. For example, if the data is a
   *       {@link android.database.Cursor} and you place it in a {@link
   *       android.widget.CursorAdapter}, use the {@link
   *       android.widget.CursorAdapter#CursorAdapter(android.content.Context, *
   *       android.database.Cursor, int)} constructor <em>without</em> passing in either {@link
   *       android.widget.CursorAdapter#FLAG_AUTO_REQUERY} or {@link
   *       android.widget.CursorAdapter#FLAG_REGISTER_CONTENT_OBSERVER} (that is, use 0 for the
   *       flags argument). This prevents the CursorAdapter from doing its own observing of the
   *       Cursor, which is not needed since when a change happens you will get a new Cursor throw
   *       another call here.
   *   <li>The Loader will release the data once it knows the application is no longer using it. For
   *       example, if the data is a {@link android.database.Cursor} from a {@link
   *       android.content.CursorLoader}, you should not call close() on it yourself. If the Cursor
   *       is being placed in a {@link android.widget.CursorAdapter}, you should use the {@link
   *       android.widget.CursorAdapter#swapCursor(android.database.Cursor)} method so that the old
   *       Cursor is not closed.
   * </ul>
   *
   * @param loader The Loader that has finished.
   * @param data The data generated by the Loader.
   */
  @Override
  public void onLoadFinished(Loader<NVRAMInfo> loader, NVRAMInfo data) {}

  @Nullable
  @Override
  protected Loader<NVRAMInfo> getLoader(int id, Bundle args) {
    return null;
  }

  @Nullable
  @Override
  protected String getLogTag() {
    return LOG_TAG;
  }

  @Nullable
  @Override
  protected OnClickIntent getOnclickIntent() {
    // TODO
    return null;
  }
}
