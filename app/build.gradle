/*
 * DD-WRT Companion is a mobile app that lets you connect to,
 * monitor and manage your DD-WRT routers on the go.
 *
 * Copyright (C) 2014  Armel Soro
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact Info: Armel Soro <apps+ddwrt@rm3l.org>
 */

/**
 * Gradle build file
 */
buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'http://dl.bintray.com/amulyakhare/maven' }
        mavenCentral()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
//apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'android-apt'
apply plugin: 'io.fabric'
//apply plugin: 'tracepot'
apply plugin: 'com.github.triplet.play'

final homePath = System.properties['user.home']

//Prompt for keystore file and password (same for private key and store file)
// Will take care of prompting via console or via a dialog form (if no console available, which
// can be the case if building with Android Studio, or with gradle daemon mode)
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':app:assembleRelease') ||
            taskGraph.hasTask(':app:assembleGenericRelease') ||
            taskGraph.hasTask(':app:assembleFdroidRelease') ||
            taskGraph.hasTask(':app:assembleGoogleRelease') ||
            taskGraph.hasTask(':app:assembleAmazonRelease') ||
            taskGraph.hasTask(':app:assembleSamsungRelease') ||
            taskGraph.hasTask(':app:assembleBlackberryRelease') ||
            taskGraph.hasTask(':app:assembleAmazonUndergroundRelease') ||
            taskGraph.hasTask(':app:assembleGenericFreeWithAdsRelease') ||
            taskGraph.hasTask(':app:assembleAmazonFreeWithAdsRelease') ||
            taskGraph.hasTask(':app:assembleGoogleFreeWithAdsRelease') ||
            taskGraph.hasTask(':app:assembleBlackberryFreeWithAdsRelease') ||
            taskGraph.hasTask(':app:assembleSamsungFreeWithAdsRelease')) {

        def password = ""
        def storeFile = ""

        //Attempt to read keystore.properties file, if any first
        final propsFile = new File(homePath.toString() + "/.droid/", "keystore.properties")
        final configName = 'release'

        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
            printf("Using properties file located at " + propsFile.absolutePath)
            final props = new Properties()
            props.load(new FileInputStream(propsFile))
            storeFile = new File(props['keystore'].toString())
//            password = props['storePassword']
//            android.signingConfigs[configName].keyAlias = props['keyAlias']
            password = props['keyPassword']

        } else if (System.console() == null) {
            storeFile = "UNDEFINED"
            password = "UNDEFINED"
        } else {
            storeFile = System.console().readLine("\nPlease enter path to keystore file: ")
            storeFile = new File(storeFile)
            password = System.console().readPassword("\nPlease enter signing config password: ")
        }

        if (storeFile == null || !storeFile.exists()) {
            throw new InvalidUserDataException("Keystore path not specified or file does not exist")
        }

        if (password.size() <= 0) {
            throw new InvalidUserDataException("You must enter the password to proceed.")
        }

        // For debugging, friendly print the version output to the Gradle console
        printf("\n-------- SIGNING CONFIG --------\n" +
                "- storeFile.absolutePath: [" + storeFile.absolutePath +
                "]\n----------------------------\n")

        android.signingConfigs.release.storeFile = storeFile
        android.signingConfigs.release.storePassword = password
        android.signingConfigs.release.keyPassword = password
    }
}

def getVersionName(String flavorName) {
    //gets tags across all branches, not just the current branch
    //inspired from https://gist.github.com/rponte/fdc0724dd984088606b0
    def latestTagGitCommit = "git -C ${rootDir} rev-list --tags --max-count=1".execute().text.trim()
    // Fetch the version according to git latest tag and "how far we are from last tag"
    def longVersionName = "git -C ${rootDir} describe --tags --long ${latestTagGitCommit}".execute().text.trim()
    def (fullVersionTag, versionBuild, gitSha) = longVersionName.tokenize('-')
    def (versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')
    def gitCommitHash = "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()

    // Return the version name
    "$versionMajor.$versionMinor.$versionPatch ($gitCommitHash-$flavorName)"
}

//configurations.all {
//    // Check for updates every build
//    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

android {
//    tracepotConfig {
//        apiGroupKey "26ccfd6824334b879a2ed6a1f87b7891"
//        enabledFor "release", "google", "fdroid", "amazon",
//                "googleFreeWithAds", "amazonFreeWithAds",
//                "samsung", "samsungFreeWithAds",
//                "amazonUnderground", "blackberry", "blackberryFreeWithAds"
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            keyAlias 'DDWRTCompanionAndroidKey'
            //User will be prompted for the parameters below, for 'assemble*Release' tasks
            keyPassword ''
            storeFile file('/dev/null')
            storePassword ''
        }
    }

    compileSdkVersion 25
    buildToolsVersion '25.0.0'
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            //noinspection GroovyAssignabilityCheck
            java.srcDirs = ['src/main/java']
            //noinspection GroovyAssignabilityCheck
            resources.srcDirs = ['src/main/res']
            aidl.srcDirs = ['src/main/res']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('src/androidTests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    defaultConfig {
        //FIXME Change applicationId for lite version
        applicationId "org.rm3l.ddwrt"
        testApplicationId "org.rm3l.ddwrt.tests"
        minSdkVersion 15
        targetSdkVersion 25

        vectorDrawables.useSupportLibrary = true

        // Enabling multidex support.
//        multiDexEnabled true
        // Fetch the version according to git latest tag and "how far are we from last tag"
        def longVersionName = "git -C ${rootDir} describe --tags --long".execute().text.trim()
        def (fullVersionTag, versionBuild, gitSha) = longVersionName.tokenize('-')
        def (versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')
//        def gitCommitHash = "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()

        // Set the version name
        versionName getVersionName("default")
//        versionName "$versionMajor.$versionMinor.$versionPatch ($gitCommitHash)"

        // Turn the version name into a version code
        //noinspection GroovyAssignabilityCheck
        versionCode versionMajor.toInteger() * 100000 +
                versionMinor.toInteger() * 10000 +
                versionPatch.toInteger() * 1000 +
                versionBuild.toInteger()

        // For debugging, friendly print the version output to the Gradle console
        printf("\n--------" + "VERSION DATA--------" + "\n" + "- CODE: " + versionCode + "\n" +
                "- NAME: " + versionName + "\n----------------------------\n")

//        testInstrumentationRunner "android.support.multidex.MultiDexTestRunner"
    }
    //Those files, from Apache Commons lib cause build errors
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        abortOnError false
        disable 'TypographyEllipsis'
    }
    /**
     * Flavors: this is because apps uploaded to Play Store will certainly be banned if
     * they contain link to billing platforms other than Google
     */
    productFlavors {
        generic {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
            buildConfigField "boolean", "WITH_ADS", "false"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "false"
            buildConfigField "boolean", "WITH_TASKER", "false"
        }
        google {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "true"
            buildConfigField "boolean", "WITH_ADS", "false"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "false"
            buildConfigField "boolean", "WITH_TASKER", "true"
        }
        amazon {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
            buildConfigField "boolean", "WITH_ADS", "false"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "false"
            buildConfigField "boolean", "WITH_TASKER", "false"
        }
        blackberry {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
            buildConfigField "boolean", "WITH_ADS", "false"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "false"
            buildConfigField "boolean", "WITH_TASKER", "false"
        }
        amazonUnderground {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
            buildConfigField "boolean", "WITH_ADS", "false"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "false"
            buildConfigField "boolean", "WITH_TASKER", "false"
        }
        samsung {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
            buildConfigField "boolean", "WITH_ADS", "false"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "false"
            buildConfigField "boolean", "WITH_TASKER", "false"
        }
        // For FOSS version only (no ads)
        fdroid {
            //Enable 'Donations' menu item
            buildConfigField "boolean", "DONATIONS", "true"
            //F-Droid (pure OSS) will contain links to Google Play IAB, Paypal, Flattr, and Bitcoin
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
            buildConfigField "boolean", "WITH_ADS", "false"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "false"
            buildConfigField "boolean", "WITH_TASKER", "false"
        }

        /*
         * =========================================================================================
         * -BEGIN- Free product flavors (but backed by Ads)
         * =========================================================================================
         */
        genericFreeWithAds {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"

            buildConfigField "boolean", "WITH_ADS", "true"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "true"
            buildConfigField "boolean", "WITH_TASKER", "false"
        }
        googleFreeWithAds {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"

            buildConfigField "boolean", "WITH_ADS", "true"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "false"
            buildConfigField "boolean", "WITH_TASKER", "false"
        }
        amazonFreeWithAds {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"

            buildConfigField "boolean", "WITH_ADS", "true"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "false"
            buildConfigField "boolean", "WITH_TASKER", "false"
        }
        blackberryFreeWithAds {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"

            buildConfigField "boolean", "WITH_ADS", "true"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "true"
            buildConfigField "boolean", "WITH_TASKER", "false"
        }
        samsungFreeWithAds {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"

            buildConfigField "boolean", "WITH_ADS", "true"
            buildConfigField "boolean", "WITH_INTERSTITIAL_ADS", "true"
            buildConfigField "boolean", "WITH_TASKER", "false"
        }
//        // For FOSS version only (with ads)
//        fdroidFreeWithAds {
//            //Disable 'Donations' menu item
//            buildConfigField "boolean", "DONATIONS", "false"
//            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
//
//            buildConfigField "boolean", "WITH_ADS", "true"
//        }
        /*
         * =========================================================================================
         * -END- Full-featured product flavors (but backed by Ads)
         * =========================================================================================
         */
    }
    dexOptions {
        incremental true
//        javaMaxHeapSize "2048M"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            zipAlignEnabled true
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }
    }


}

//Automate the way version name is built for each flavor
android.productFlavors.each { flavor ->
    flavor.versionName = getVersionName(flavor.name)
}

//Other external repositories, to be used besides jcenter
repositories {
    maven {
        url "https://repository-achartengine.forge.cloudbees.com/snapshot/"
    }
    maven {
        url 'http://dl.bintray.com/amulyakhare/maven'
    }
    mavenCentral()
    maven {
        url 'https://maven.fabric.io/public'
    }
}

/*
play {
    serviceAccountEmail = '294046724212-r3bef6kl46pb9gk0h1pl5rcjmpfrdpjl@developer.gserviceaccount.com'
    pk12File = file("${homePath}/src/583631bdd16d.p12")
    track = 'beta'
}
 */

//Dependencies
dependencies {

    // Unit testing dependencies
    testCompile 'junit:junit:4.12'
    // Set this dependency if you want to use the Hamcrest matcher library
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    // more stuff, e.g., Mockito
    testCompile 'org.mockito:mockito-core:1.10.19'

    // Required for instrumented tests
    androidTestCompile 'com.android.support:support-annotations:25.0.1'
    androidTestCompile 'com.android.support.test:runner:0.5'

    // Latest one on maven central
//    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:+'

    compile project(':common')

    compile fileTree(include: '*.jar', dir: 'libs')
    //Crouton notification lib (cf. #125 - replace with Android SnackBar)
    compile('de.keyboardsurfer.android.widget:crouton:1.8.5@aar') {
        // exclusion is not necessary, but generally a good idea.
        exclude group: 'com.google.android', module: 'support-v4'
    }
    compile('com.mikepenz:materialdrawer:5.6.0@aar') {
        transitive = true
    }

    //The commons module contains extensions to the library that not everyone may need.
    // This includes the ColorChooserDialog, FolderChooserDialog, the Material Preference classes,
    // and MaterialSimpleListAdapter/MaterialSimpleListItem
//    compile('com.github.afollestad.material-dialogs:commons:0.8.5.4@aar') {
//        transitive = true
//    }

//    compile 'com.android.support:multidex:1.0.0'

//    androidTestCompile 'com.android.support:multidex-instrumentation:1.0.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }

    compile 'net.i2p.android.ext:floatingactionbutton:1.10.1'
    compile 'com.jakewharton.timber:timber:4.3.1'

    compile 'org.achartengine:achartengine:1.2.0'
    compile 'org.sufficientlysecure:donations:2.4'
    compile 'com.google.guava:guava:19.0'
    compile 'commons-io:commons-io:2.5'
    compile 'commons-net:commons-net:3.5'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-codec:commons-codec:1.10'
    compile 'com.jcraft:jsch:0.1.51'
//    compile 'ch.acra:acra:4.9.0'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.android.support:design:25.0.1'
    compile 'com.android.support:support-v4:25.0.1'
    compile 'com.android.support:cardview-v7:25.0.1'
    compile 'com.android.support:recyclerview-v7:25.0.1'
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.android.support:palette-v7:25.0.1'
    compile 'com.android.support:customtabs:25.0.1'
    compile 'com.cocosw:undobar:1.8.1@aar'
    compile 'com.google.zxing:core:3.3.0'
    compile 'com.github.curioustechizen.android-ago:library:1.3.2'
    compile 'com.github.danielemaddaluno.androidupdatechecker:library:1.0.2'
    compile 'com.google.android.gms:play-services-ads:9.8.0'
    compile 'fr.nicolaspomepuy:discreetapprate:2.0.4@aar'
    compile 'com.squareup.picasso:picasso:2.5.2'
//    compile 'com.github.halysongoncalves:pugnotification:1.8.1'

    compile 'org.osmdroid:osmdroid-android:5.2@aar'

    compile 'com.github.lzyzsd:circleprogress:1.1.0@aar'
//    compile 'com.github.glomadrian:dashed-circular-progress:62912bbdd5'

    compile 'mbanje.kurt:fabbutton:1.2.2@aar'
    compile 'com.sothree.slidinguppanel:library:3.3.1'

    compile 'com.google.android.gms:play-services-appindexing:9.8.0'

    /*
     * AirBnB DeepLinkDispatch
     */
    compile 'com.airbnb:deeplinkdispatch:2.0.1'
    apt 'com.airbnb:deeplinkdispatch-processor:2.0.1'

    compile 'org.codepond:wizardroid:1.3.1'

    //Otto EventBus
    compile 'com.squareup:otto:1.3.8'

    //Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'

    compile ('org.rm3l:maoni:2.3.1@aar') {
        transitive = true;
    }

    compile ('org.rm3l:maoni-doorbell:0.1.1') {
        transitive = false;
    }

    //LeakCanary - to detect memory leaks (only in debug flavor)
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

    compile 'com.facebook.stetho:stetho:1.4.1'
    compile 'com.facebook.stetho:stetho-okhttp3:1.4.1'

//    compile 'io.reactivex:rxandroid:1.2.0'
//    compile 'io.reactivex:rxjava:1.1.5'

    compile 'com.zsoltsafrany:needle:1.0.0'

    compile 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'

    compile 'com.amazonaws:aws-android-sdk-core:2.3.3'
    compile 'com.amazonaws:aws-android-sdk-s3:2.3.3'

    compile 'com.stephentuso:welcome:0.7.3'

//    compile 'com.esotericsoftware:kryo:4.0.0'

    // use the latest 1.x version
    compile 'org.wordpress:passcodelock:1.3.0'

    compile 'com.google.firebase:firebase-messaging:9.8.0'
}

// Add to the bottom of the file
apply plugin: 'com.google.gms.google-services'