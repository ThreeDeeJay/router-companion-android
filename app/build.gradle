/*
 * DD-WRT Companion is a mobile app that lets you connect to,
 * monitor and manage your DD-WRT routers on the go.
 *
 * Copyright (C) 2014  Armel Soro
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact Info: Armel Soro <apps+ddwrt@rm3l.org>
 */

/**
 * Gradle build file
 */
import groovy.swing.SwingBuilder

apply plugin: 'com.android.application'

//Prompt for keystore file and password (same for private key and store file)
// Will take care of prompting via console or via a dialog form (if no console available, which
// can be the case if building with Android Studio, or with gradle daemon mode)
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':app:assembleRelease') ||
            taskGraph.hasTask(':app:assembleFdroidRelease') ||
            taskGraph.hasTask(':app:assembleGoogleRelease') ||
            taskGraph.hasTask(':app:assembleAmazonRelease')) {
        def password = ''
        def storeFile = null
        if (System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true, title: 'Enter signing configuration', alwaysOnTop: true, resizable: false, locationRelativeTo: null, pack: true, show: true) {
                    vbox { // Put everything below each other
                        label(text: "Please select keystore file:")
                        def fileInput = fileChooser()
                        label(text: "Please enter passphrase:")
                        def input = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            storeFile = fileInput.selectedFile
                            password = new String(input.password)
                            dispose()
                        })
                    }
                }
            }
        } else {
            storeFile = System.console().readLine("\nPlease enter path to keystore file: ")
            storeFile = new File(storeFile)
            password = System.console().readPassword("\nPlease enter signing config password: ")
            password = new String(password)
        }

        if (storeFile == null || !storeFile.exists()) {
            throw new InvalidUserDataException("Keystore path not specified or file does not exist")
        }

        if (password.size() <= 0) {
            throw new InvalidUserDataException("You must enter the password to proceed.")
        }

        // For debugging, friendly print the version output to the Gradle console
        printf("\n-------- SIGNING CONFIG --------\n" +
                "- storeFile.absolutePath: [" + storeFile.absolutePath +
                "]\n----------------------------\n")

        android.signingConfigs.release.storeFile = storeFile
        android.signingConfigs.release.storePassword = password
        android.signingConfigs.release.keyPassword = password
    }
}

def getVersionName(String flavorName) {
    // Fetch the version according to git latest tag and "how far are we from last tag"
    def longVersionName = "git -C ${rootDir} describe --tags --long".execute().text.trim()
    def (fullVersionTag, versionBuild, gitSha) = longVersionName.tokenize('-')
    def (versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')
    def gitCommitHash = "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()

    // Return the version name
    "$versionMajor.$versionMinor.$versionPatch ($gitCommitHash-$flavorName)"
}

android {

    signingConfigs {
        release {
            keyAlias 'DDWRTCompanionAndroidKey'
            //User will be prompted for the parameters below, if 'assemble*Release' tasks
            keyPassword ''
            storeFile file('/dev/null')
            storePassword ''
        }
    }
    compileSdkVersion 21
    buildToolsVersion "21.1.1"
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            //noinspection GroovyAssignabilityCheck
            java.srcDirs = ['src/main/java']
            //noinspection GroovyAssignabilityCheck
            resources.srcDirs = ['src/main/res']
            aidl.srcDirs = ['src/main/res']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('src/androidTests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    defaultConfig {
        applicationId "org.rm3l.ddwrt"
        minSdkVersion 14
        targetSdkVersion 21
        // Fetch the version according to git latest tag and "how far are we from last tag"
        def longVersionName = "git -C ${rootDir} describe --tags --long".execute().text.trim()
        def (fullVersionTag, versionBuild, gitSha) = longVersionName.tokenize('-')
        def (versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')
//        def gitCommitHash = "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()

        // Set the version name
        versionName getVersionName("default")
//        versionName "$versionMajor.$versionMinor.$versionPatch ($gitCommitHash)"

        // Turn the version name into a version code
        //noinspection GroovyAssignabilityCheck
        versionCode versionMajor.toInteger() * 100000 +
                versionMinor.toInteger() * 10000 +
                versionPatch.toInteger() * 1000 +
                versionBuild.toInteger()

        // For debugging, friendly print the version output to the Gradle console
        printf("\n--------" + "VERSION DATA--------" + "\n" + "- CODE: " + versionCode + "\n" +
                "- NAME: " + versionName + "\n----------------------------\n")
    }
    /**
     * Flavors: this is because apps uploaded to Play Store will certainly be banned if
     * they contain link to billing platforms other than Google
     */
    productFlavors {
        google {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "true"
        }
        amazon {
            //Disable 'Donations' menu item for Play Store app (it will certainly be a paid app)
            buildConfigField "boolean", "DONATIONS", "false"
            //PlayStore app will contain an In-App Billing (IAB) link to Google Play only
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
        }
        // For FOSS version only
        fdroid {
            //Enable 'Donations' menu item
            buildConfigField "boolean", "DONATIONS", "true"
            //F-Droid (pure OSS) will contain links to Google Play IAB, Paypal, Flattr, and Bitcoin
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    //Those files, from Apache Commons lib cause build errors
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        abortOnError false
    }

}

//Automate the way version name is built for each flavor
android.productFlavors.each { flavor ->
    flavor.versionName = getVersionName(flavor.name)
}


//Other external repositories, to be used besides jcenter
repositories {
    maven {
        url "https://repository-achartengine.forge.cloudbees.com/snapshot/"
    }
}

//Dependencies
dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile 'org.achartengine:achartengine:1.2.0'
    //Crouton notification lib
    compile('de.keyboardsurfer.android.widget:crouton:1.8.5@aar') {
        // exclusion is not necessary, but generally a good idea.
        exclude group: 'com.google.android', module: 'support-v4'
    }
    compile project(':libraries:Donations')
    compile 'com.google.guava:guava:18.0'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-net:commons-net:3.3'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'commons-codec:commons-codec:1.10'
    compile 'com.jcraft:jsch:0.1.51'
    compile 'ch.acra:acra:4.5.0'
    compile 'com.intellij:annotations:12.0'
    compile 'com.github.japgolly:svg-android:2.0.0'
    compile 'com.koushikdutta.ion:ion:2.0.0'
    compile 'com.google.code.gson:gson:2.3'
    compile 'com.koushikdutta.async:androidasync:2.0.0'
    compile 'com.googlecode.androidannotations:androidannotations:2.7.1'
    compile 'com.android.support:support-v4:21.0.2'
    compile 'com.android.support:cardview-v7:21.0.2'
    compile 'com.android.support:recyclerview-v7:21.0.2'
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'de.cketti.library.changelog:ckchangelog:1.2.1'
    compile 'com.cocosw:undobar:1.+@aar'
    compile 'com.google.zxing:core:3.1.0'
}
