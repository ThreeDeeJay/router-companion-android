/*
 * DD-WRT Companion is a mobile app that lets you connect to,
 * monitor and manage your DD-WRT routers on the go.
 *
 * Copyright (C) 2014  Armel Soro
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact Info: Armel Soro <apps+ddwrt@rm3l.org>
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext.android_sdk = 26
  ext.buildTools_version = '26.0.2'
  ext.support_version = '26.1.0'
  ext.kotlin_version = '1.1.51'
  ext.anko_version = '0.10.1'
  //Workaround to have the 'com.android.application' plugin with any version of Gradle (other than the expected one)
  //see https://github.com/gradle/gradle-script-kotlin/issues/2#issuecomment-222120296
  System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'
  repositories {
    jcenter()
    mavenCentral()
    //        maven { url 'http://www.tracepot.com/maven' }
    maven {
      url 'https://maven.google.com'
    }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:3.0.0-beta7'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    //        classpath 'com.tracepot.plugins.gradle:tracepot:1.+'
    classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
//    classpath 'me.tatarka:gradle-retrolambda:3.2.5'

    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files// Add this line
    classpath 'com.google.gms:google-services:3.1.0'
  }
}
apply plugin: 'kotlin'

allprojects {
  repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven {
      url 'https://maven.google.com'
    }
  }
}

subprojects {
  repositories {
    maven { url 'http://clojars.org/repo' }
  }
}

def homePath = System.properties['user.home'].toString()

ext.getPlayStoreConfig = {
  return file(homePath + "/.droid/PlayStore.keys.json")
}

final propsFile = new File(homePath + "/.droid/keystore.properties")
def storeFile = file('/dev/null')
def keyPassword = ""
if (propsFile.exists()) {
  logger.debug("[Signing] Using properties file located at ${propsFile.absolutePath}")
  final props = new Properties()
  props.load(new FileInputStream(propsFile))
  storeFile = new File(props['keystore'].toString())
  keyPassword = props['keyPassword']
}

ext.getAndroidSigningConfig = {
  return [storeFile, keyPassword, keyPassword]
}

ext.getVersionCodeAndName = {
  flavorName ->
    def latestTagGitCommit = "git -C ${rootDir} rev-list --tags --max-count=1".execute().text.trim()
    // Fetch the version according to git latest tag and "how far we are from last tag"
    def longVersionName = "git -C ${rootDir} describe --tags --long ${latestTagGitCommit}".execute().text.
        trim()
    def (fullVersionTag, versionBuild, gitSha) = longVersionName.tokenize('-')
    def (versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')
    def gitCommitHash = "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()

    logger.debug("[Git] getVersionName($flavorName): \n" +
        "rootDir = $rootDir , \n" +
        "latestTagGitCommit = $latestTagGitCommit , \n" +
        "longVersionName = $longVersionName , \n" +
        "fullVersionTag = $fullVersionTag , \n" +
        "versionBuild = $versionBuild , \n" +
        "gitSha = $gitSha , \n" +
        "versionMajor = $versionMajor , \n" +
        "versionMinor = $versionMinor , \n" +
        "versionPatch = $versionPatch , \n" +
        "gitCommitHash = $gitCommitHash")

    // Return the version name
    final versionName = "$versionMajor.$versionMinor.$versionPatch ($gitCommitHash-$flavorName)"
    final versionCode = (
        versionMajor.toInteger() * 100000 +
        versionMinor.toInteger() * 10000 +
        versionPatch.toInteger() * 1000 +
        versionBuild.toInteger())

    return [versionCode, versionName]

}
repositories {
    mavenCentral()
}
dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

