/*
 * DD-WRT Companion is a mobile app that lets you connect to,
 * monitor and manage your DD-WRT routers on the go.
 *
 * Copyright (C) 2014  Armel Soro
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact Info: Armel Soro <apps+ddwrt@rm3l.org>
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.android_sdk = 27
    ext.buildTools_version = '27.0.3'
    ext.support_version = '27.1.0'
    ext.kotlin_version = '1.2.30'
    ext.android_ktx_version = '0.2'
    ext.anko_version = '0.10.4'
    ext.playServices_version = '11.8.0'
    ext.robolectric_version = '3.7.1'
    ext.junit_version = '4.12'
    ext.mockito_version = '1.10.19'
    ext.avocarrot_glispa_version = '4.10.1'

    //Workaround to have the 'com.android.application' plugin with any version of Gradle (other than the expected one)
    //see https://github.com/gradle/gradle-script-kotlin/issues/2#issuecomment-222120296
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://maven.google.com'
        }
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0-alpha04'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
        classpath 'com.google.gms:google-services:3.2.0'
        classpath 'com.uber:okbuck:0.34.1'
    }
}
apply plugin: 'com.uber.okbuck'
apply plugin: 'kotlin'

allprojects {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
        maven {
            url 'https://maven.google.com'
        }
    }
}

subprojects {
    repositories {
        maven { url 'http://clojars.org/repo' }
    }
}

def homePath = System.properties['user.home'].toString()

ext.getPlayStoreConfig = {
    return file(homePath + "/.droid/PlayStore.keys.json")
}

final propsFile = new File(homePath + "/.droid/keystore.properties")
def storeFile = file('/dev/null')
def keyPassword = ""
if (propsFile.exists()) {
    logger.debug("[Signing] Using properties file located at ${propsFile.absolutePath}")
    final props = new Properties()
    props.load(new FileInputStream(propsFile))
    storeFile = new File(props['keystore'].toString())
    keyPassword = props['keyPassword']
}
ext.getReleaseSigningConfig = {
    return ['DDWRTCompanionAndroidKey', storeFile, keyPassword, keyPassword]
}
ext.getDebugSigningConfig = {
    return ['androiddebugkey', new File("${rootDir}/debug.keystore"), 'android', 'android']
}

ext.getVersionCodeAndName = {
    flavorName ->
        // Fetch the version according to git latest tag and "how far we are from last tag"
        def longVersionName = "git -C ${rootDir} describe --tags --long HEAD".execute().text.trim()
        def (fullVersionTag, versionBuild, gitSha) = longVersionName.tokenize('-')
        def latestTagGitCommit = "git -C ${rootDir} rev-list rev-list -n 1 ${fullVersionTag}".execute().text.trim()
        def (versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')
        def gitCommitHash = "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()

        logger.debug("[Git] getVersionName($flavorName): \n" +
                "rootDir = $rootDir , \n" +
                "latestTagGitCommit = $latestTagGitCommit , \n" +
                "longVersionName = $longVersionName , \n" +
                "fullVersionTag = $fullVersionTag , \n" +
                "versionBuild = $versionBuild , \n" +
                "gitSha = $gitSha , \n" +
                "versionMajor = $versionMajor , \n" +
                "versionMinor = $versionMinor , \n" +
                "versionPatch = $versionPatch , \n" +
                "gitCommitHash = $gitCommitHash")

        // Return the version name
        final versionNameFullVersionLast = versionBuild ? "-$versionBuild" : ""
        final versionName = "$fullVersionTag$versionNameFullVersionLast/$gitCommitHash-$flavorName"
        final versionCode = (
                versionMajor.toInteger() * 100000 +
                        versionMinor.toInteger() * 10000 +
                        versionPatch.toInteger() * 1000 +
                        versionBuild.toInteger())

        return [versionCode, versionName]

}
repositories {
    mavenCentral()
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

kapt {
    useBuildCache = true
}

okbuck {
    lint {
        disabled = true
    }
    buildToolVersion = buildTools_version
    target = "android-$android_sdk"
    buckProjects = project.subprojects
    annotationProcessors = [
            "local-apt-dependency": ['com.airbnb.deeplinkdispatch.DeepLinkProcessor']
    ]
//    wrapper {
//        //Fork with kapt support
//        repo = 'https://github.com/cwoodwar6/buck.git'
//    }
}