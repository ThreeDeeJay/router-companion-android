stages:
  - build
  - pre_deploy
  - deploy


################################################################################
# Build, using Buck (much faster than with Gradle)
################################################################################
build_project:
  image: registry.gitlab.com/lemra/router-companion-android/android-sdk:latest
  stage: build
  before_script:
    # Properly configure inotify values (for Watchman)
    - export INOTIFY_SYSCTL_VALUE=999999
    - sysctl 
          fs.inotify.max_user_watches=$INOTIFY_SYSCTL_VALUE 
          fs.inotify.max_queued_events=$INOTIFY_SYSCTL_VALUE 
          fs.inotify.max_user_instances=$INOTIFY_SYSCTL_VALUE 
        || true
    - sysctl -p

    - chmod +x ./gradlew ./buckw

    - watchman watch-del $CI_PROJECT_DIR || true

  # Note on caching: 
  # We should not rely upon the cache, as it is done on a best effort basis, 
  # i.e., no cache if run on different runners
  cache:
    key: "cache-$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG" # per branch caching
    untracked: true
    paths:
      - $GRADLE_USER_HOME/caches/
      - $GRADLE_USER_HOME/wrapper/
      - $GRADLE_USER_HOME/build-cache/
      - buck-out
      - .okbuck

  script:
    # This is because of the AAR issue below, we first run a 'buck target', 
    # so Okbuck is run first if needed (thus dropping the 'buck-out' folder)
    - bash ./buckw targets

    # Some Google dependencies do not strictly follow the AAR spec 
    # (which requires a 'res' folder to be present, even when empty)
    # Buck is much stricter, and we need to manually create such folder.
    - for nonStdAar in com.google.android.gms.play-services-ads-lite-license
        com.google.android.gms.play-services-base-license
        com.google.android.gms.play-services-basement-license
        com.google.android.gms.play-services-tasks-license
        com.google.firebase.firebase-analytics-impl-license
        com.google.firebase.firebase-analytics-license
        com.google.firebase.firebase-appindexing-license
        com.google.firebase.firebase-common-license
        com.google.firebase.firebase-core
        com.google.firebase.firebase-iid-license ;
      do
        nonStdAarFullName="${nonStdAar}-11.8.0.aar";
        mkdir -pv $CI_PROJECT_DIR'/buck-out/bin/.okbuck/cache/__unpack_'${nonStdAarFullName}'#aar_unzip__/res' ;
        bash ./buckw build //.okbuck/cache:${nonStdAarFullName} ;
        mkdir -pv $CI_PROJECT_DIR'/buck-out/bin/.okbuck/cache/__unpack_'${nonStdAarFullName}'#aar_unzip__/res' ;
      done

    - watchman watch-project $CI_PROJECT_DIR || true

    - bash ./buckw build appAmazonDebug tasker-pluginAmazonDebug
    - ./gradlew projectReport htmlDependencyReport countAmazonDebugDexMethods

  artifacts:
    paths:
    - "buck-out/gen/app/*.apk"
    - "buck-out/gen/tasker-plugin/*.apk"

    - app/build/reports
    - app/build/outputs/
    - app/build/doc

    - common/build/reports
    - common/build/outputs

    - tasker-plugin/build/outputs
    - tasker-plugin/build/reports


################################################################################
# Production deployments (only on master).
#
# For deployment, few environment variables are required:
# - SSH_PRIVATE_KEY
# - SSH_SERVER_HOSTKEYS
################################################################################
#
# Template anchor: configures the SSH client, 
# so it can safely connect to the deploy server
#
.production_job_template: &production_job_definition
  image: registry.gitlab.com/lemra/router-companion-android/production_deployments:latest
  only:
    - master
  environment: production
  before_script:
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" >> ~/.ssh/known_hosts'

#
# Preparation job: Syncs only the necessary files that wil be used by the actual deploy jobs
#
prepare_production_environment:
  <<: *production_job_definition
  stage: pre_deploy
  script:
    - ssh -p 1022 ci@rm3l.org "mkdir -p /home/ci/router-companion-android"
    - rsync -ravz -e 'ssh -p 1022' 
          --exclude='.git/' 
          --exclude='.gitlab-ci.yml' 
          --exclude='.gradle' 
          --exclude='build' 
          --delete-excluded ./messaging 
          --delete-excluded ./tools 
        ci@rm3l.org:/home/ci/router-companion-android

#
# Deploy messaging containers
#
production_messaging:
  <<: *production_job_definition
  stage: deploy
  script:
    - ssh -p 1022 ci@rm3l.org 
        "cd /home/ci/router-companion-android/messaging && docker-compose -p router-companion-android-messaging pull && docker-compose -p router-companion-android-messaging up -d --build --remove-orphans"

#
# Deploy tools containers
#
production_tools:
  <<: *production_job_definition
  stage: deploy
  script:
    - ssh -p 1022 ci@rm3l.org 
        "cd /home/ci/router-companion-android/tools && docker-compose -p router-companion-android-tools pull && docker-compose -p router-companion-android-tools up -d --build --remove-orphans"
